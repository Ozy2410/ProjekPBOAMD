/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frame;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Kelas ini merupakan frame untuk menampilkan daftar anggota gym dari database.
 * Frame ini menampilkan tabel dengan kolom-kolom informasi anggota seperti nama,
 * nomor telepon, email, gender, waktu gym, ID anggota, tanggal lahir, dan status pembayaran.
 * Data diambil dari tabel 'tb_member' dalam database yang terhubung.
 * 
 * Kelas ini menggunakan DefaultTableModel untuk mengatur model tabel dan menampilkan
 * data anggota yang diambil dari database.
 * 
 * @author Muhammad Khalil
 */
public class FrameListMember extends javax.swing.JFrame {

    /**
     * Creates new form FrameListMember
     */
    private Connection connect;
    private DefaultTableModel model;
    
    /**
     * Konstruktor untuk membuat instance baru dari FrameListMember.
     * Inisialisasi komponen GUI dan model tabel, serta memuat data anggota dari database.
     */
    public FrameListMember() {
        initComponents();
        
        // Inisialisasi model tabel dengan kolom-kolom yang sesuai
        model = new DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Name", "Phone Number", "Email", "Gender", "Gym Time", "ID Member", "Birth Date", "Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        
        jTable1.setModel(model);// Mengatur model tabel untuk jTable1
        
        loadData();// Memuat data anggota dari database ke dalam tabel
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Phone Number", "Email", "Gender", "Gym Time", "ID Member", "Birth Date", "Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1082, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    /**
     * Metode ini digunakan untuk memuat data anggota dari database ke dalam tabel.
     * Data diambil dari tabel 'tb_member'.
     * Jika terjadi kesalahan saat mengambil data, ditampilkan pesan kesalahan.
     */
    private void loadData(){         
        try{
            if(connect == null || connect.isClosed()) {
                connect = Koneksi.getConnection(); // Mendapatkan koneksi ke database
            }
            Statement stm = connect.createStatement();
            ResultSet rs = stm.executeQuery("SELECT * FROM tb_member"); // Query untuk memilih semua data dari tabel tb_member
            
            while (rs.next()) {
                // Mengambil nilai dari setiap kolom pada setiap baris
                String nama = rs.getString("nama");
                String noHP = rs.getString("no_hp");
                String email = rs.getString("email");
                String gender = rs.getString("gender");
                String gymTime = rs.getString("gym_time");
                String member_id = rs.getString("id_member");
                String tgl_lahir = rs.getString("tgl_lahir");
                String bayar = rs.getString("bayaran");
                
                // Menyimpan nilai dalam array yang akan ditambahkan ke model tabel
                Object[] rowData = {nama, noHP, email, gender, gymTime, member_id, tgl_lahir, bayar};
                model.addRow(rowData);// Menambahkan baris data ke model tabel
            }
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Metode utama untuk menjalankan aplikasi FrameListMember.
     * Metode ini membuat instance dari FrameListMember dan menampilkannya.
     * 
     * @param args Argumen baris perintah yang mungkin disertakan (tidak digunakan dalam aplikasi ini).
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameListMember.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameListMember.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameListMember.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameListMember.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameListMember().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
